# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hF3T9siJcyQs0HMaTRVJtK1umMGnyal5
"""

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('Food_Nutrition__.csv')
data.head()

data = data[['Ages' , 'Weight' , 'Activity Level' , 'Calories' , 'Dietary Preference']]

data.dropna(inplace=True)

def Suggest_diet_plan(age, weight, activity_level, goal):
  """
  اقتراح خطة غزائية بناءا على العمر ،الوزن ، مستوى النشاط، والهدف الغزائى
  """
  if activity_level == "Inactive":
    calories_base = weight * 20
  elif activity_level == "Moderately Active":
    calories_base = weight * 25
  else:
    calories_base = weight * 30

  if goal == "Weight Loss":
    calories_target = calories_base -500
  elif goal == "Weight Gain":
    calories_target = calories_base + 500
  else:
    calories_target = calories_base

  protein = 0.3 * calories_target / 4
  carbs = 0.5 * calories_target / 4
  fat = 0.2 * calories_target / 9

  return {
      "Calories Target": calories_target,
      "Protein (g)": round(protein, 2),
      "Carbs (g)": round(carbs, 2),
      "Fat (g)": round(fat, 2)
  }

user_age = int(input("Enter your age: "))
user_weight = float(input("Enter your weight (kg): "))
user_activity_level = input("Enter your activity level (Inactive, Moderately Active, Active): ")
user_goal = input("Enter your goal (Weight Loss, Weight Gain, Maintain Weight): ")

diet_plan = Suggest_diet_plan(user_age, user_weight, user_activity_level, user_goal)
print("\nSuggested Diet Plan:")
for Key, Value in diet_plan.items():
  print(f"{Key}: {Value}")

import pandas as pd
data = pd.DataFrame({
    'Ages': [user_age],
    'Weight': [user_weight],
    'Activity Level': [user_activity_level],
    'Calories': [diet_plan["Calories Target"]],
    'Dietary Preference': [user_goal]
})

Activity_Level_encoder = LabelEncoder()
data['Activity Level'] = Activity_Level_encoder.fit_transform(data['Activity Level'])

dietary_preference_encoder = LabelEncoder()
data['Dietary Preference'] = dietary_preference_encoder.fit_transform(data['Dietary Preference'])

from sklearn.cluster import KMeans
Kmeans = KMeans(n_clusters=1, random_state=42)
data['Cluster'] = Kmeans.fit_predict(data[['Ages' , 'Weight' , 'Activity Level' , 'Calories' , 'Dietary Preference']])

print("\nCentroids of the clusteres:")
print(Kmeans.cluster_centers_)

def simulate_weight_loss(weight, calories_target, calories_change, week=24):
  weight_loss_per_week = 0.5 * (calories_change / 500)
  total_weight_loss = weight_loss_per_week * week
  new_weight = weight - total_weight_loss
  return new_weight

def simulate_health_changes(data, calories_change):
  data['Predicted Weight After 6 Months'] = data.apply(lambda row: simulate_weight_loss(row['Weight'], row['Calories'], calories_change), axis=1)
  return data

calories_change = diet_plan["Calories Target"] - data['Calories'].mean()

data_simulated = simulate_health_changes(data, calories_change)

print("\nSimulated results  after applying in thevdietary plan:")
print(data_simulated[['Ages' , 'Weight' , 'Cluster' , 'Predicted Weight After 6 Months']].head())

grouped = data_simulated.groupby('Cluster')['Predicted Weight After 6 Months'].mean()
print("\nAverage predicted weight for each cluster:")
print(grouped)

plt.scatter(data_simulated['Ages'], data_simulated['Predicted Weight After 6 Months'], c=data_simulated['Cluster'], cmap='viridis')
plt.xlabel('Ages')
plt.ylabel('Predicted Weight After 6 Months')
plt.title('Predicted Weight After 6 Months Based on Dietary Plan')
plt.show()

